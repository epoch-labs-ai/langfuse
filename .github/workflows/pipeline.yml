name: CI/CD

on:
  workflow_dispatch:
    push:
      branches:
        - "main"
    tags:
      - "v*"
  merge_group:
    pull_request:
      branches:
        - "main"

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
      - name: install dependencies
        run: |
          npm ci
      - name: Load default env
        run: |
          cp .env.dev.example .env
      - name: lint
        run: npm run lint

  tests:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: install dependencies
        run: |
          npm ci

      - name: Load default env
        run: |
          cp .env.dev.example .env

      - name: Run, migrate, seed DB
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          sleep 5 # Wait for PostgreSQL to accept connections
          npx --yes prisma migrate reset --force --skip-generate

      - name: Build
        run: npm run build

      - name: Start Langfuse
        run: (npm start&)

      - name: run tests
        run: npm run test

  e2e-tests:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"

      - name: install dependencies
        run: |
          npm ci

      - name: Load default env
        run: |
          cp .env.dev.example .env

      - name: Run, migrate, seed DB
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          sleep 5 # Wait for PostgreSQL to accept connections
          npx --yes prisma migrate reset --force --skip-generate

      - name: Build
        run: npm run build

      - name: Install playwright
        run: npx playwright install

      - name: Run e2e tests
        run: npm run test:e2e

  all-ci-passed:
    # This allows us to have a branch protection rule for tests and deploys with matrix
    runs-on: self-hosted
    needs: [lint, tests, e2e-tests]
    if: always()
    steps:
      - name: Successful deploy
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0
      - name: Failing deploy
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

  push-docker-image:
    needs: all-ci-passed
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    environment: "protected branches"
    runs-on: self-hosted
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
      NEXTAUTH_SECRET: "secret"
      SALT: "salt"
      NEXTAUTH_URL: "http://localhost:3030"
      REGISTRY: 596460412103.dkr.ecr.us-east-1.amazonaws.com
      IMAGE_NAME: langfuse
    permissions:
      packages: write
      contents: read
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DATABASE_URL=${{ env.DATABASE_URL }}
            NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ env.NEXTAUTH_URL }}
            SALT=${{ env.SALT }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1

      - name: Remove untagged images from ECR
        run: |
          # Check if AWS CLI is correctly installed and configured
          if ! aws --version; then
          echo "AWS CLI is not installed or not in PATH."
          exit 1
          fi
          echo "Fetching untagged images from $IMAGE_NAME..."

          # Get the untagged image digests
          UNTAGGED_IMAGES=$(aws ecr list-images --repository-name $IMAGE_NAME --filter tagStatus=UNTAGGED --query 'imageIds[*].imageDigest' --output text)

          for digest in $UNTAGGED_IMAGES; do
          echo "Deleting image with digest $digest..."
          aws ecr batch-delete-image --repository-name $IMAGE_NAME --image-ids imageDigest=$digest
          done

